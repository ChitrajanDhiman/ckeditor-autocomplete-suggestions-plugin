{"name":"Ckeditor-autocomplete-suggestions-plugin","tagline":"A Ckeditor Plugin to show suggestion while you type, the suggestion are defined by you and the action key to trigger plugin is also developer defined.","body":"# ckeditor-autocomplete-plugin\r\nA Ckeditor Plugin to Show suggestion while you type, the suggestion are defined by you and the action key to trigger plugin is also developer defined.\r\n\r\nIn order to make a suggestion box, you will have to make your custom plugin to use context menu as suggestion box, please check out the link for the basic knowledge of making ckeditor plugin from here a link\r\n\r\nAdd this to your config.js, where autocomplete is name of the plugin\r\n\r\nconfig.extraPlugins = 'autocomplete';\r\nThen create a following directory structure/file in the ckeditor folder\r\n\r\nckeditor->plugins->autocomplete->plugin.js\r\nPut the following content in your plugin.js file\r\n\r\nCKEDITOR.plugins.add('autocomplete',\r\n            {\r\n                init : function(editor) {\r\n\r\n                     var autocompleteCommand = editor.addCommand('autocomplete', {\r\n                        exec : function(editor) {\r\n                            var dummyElement = editor.document\r\n                                    .createElement('span');\r\n                            editor.insertElement(dummyElement);\r\n\r\n                            var x = 0;\r\n                            var y = 0;\r\n\r\n                            var obj = dummyElement.$;\r\n\r\n                            while (obj.offsetParent) {\r\n                                x += obj.offsetLeft;\r\n                                y += obj.offsetTop;\r\n                                obj = obj.offsetParent;\r\n                            }\r\n                            x += obj.offsetLeft;\r\n                            y += obj.offsetTop;\r\n\r\n                            dummyElement.remove();\r\n\r\n                            editor.contextMenu.show(editor.document\r\n                                    .getBody(), null, x, y);\r\n                        }\r\n                    });\r\n                },\r\n\r\n                afterInit : function(editor) {\r\n                    editor.on('key', function(evt) {\r\n                        if (evt.data.keyCode == editor.config.suggestionsTriggerKey.keyCode) {\r\n                            editor.execCommand('autocomplete');\r\n                        }\r\n                    });\r\n\r\n                    var firstExecution = true;\r\n                    var dataElement = {};\r\n\r\n                     editor.addCommand('reloadSuggetionBox', {\r\n                            exec : function(editor,suggestions) {\r\n                                if (editor.contextMenu) {\r\n                                    dataElement = {};\r\n                                    editor.addMenuGroup('suggestionBoxGroup');\r\n\r\n                            $.each(suggestions,function(i, suggestion)\r\n                            {\r\n                                    var suggestionBoxItem = \"suggestionBoxItem\"+ i; \r\n                                    dataElement[suggestionBoxItem] = CKEDITOR.TRISTATE_OFF;\r\n                                    editor.addMenuItem(suggestionBoxItem,\r\n                                                                        {\r\n                                        id : suggestion.id,\r\n                                        label : suggestion.label,\r\n                                        group : 'suggestionBoxGroup',\r\n                                        icon  : null,\r\n                                        onClick : function() {\r\n                                            var data = editor.getData();\r\n                                            var selection = editor.getSelection();\r\n                                            var element = selection.getStartElement();\r\n                                            var ranges = selection.getRanges();\r\n                                            ranges[0].setStart(element.getFirst(), 0);\r\n                                            ranges[0].setEnd(element.getFirst(),0);\r\n                                            editor.insertHtml(this.id + '&nbsp;');\r\n                                            },\r\n                                            });\r\n                                    });\r\n\r\n                                    if(firstExecution == true)\r\n                                        {\r\n                                            editor.contextMenu.addListener(function(element) {\r\n                                                return dataElement;\r\n                                            });\r\n                                        firstExecution = false;\r\n                                        }\r\n                                }\r\n                            }\r\n                     });\r\n\r\n                    delete editor._.menuItems.paste;\r\n                },\r\n            });\r\n\r\nHere \"suggestions\" is the variable passed from a jquery file on your page, the variable holds a list of object having a 'id' and 'label' to be shown in suggestion.\r\n\r\nNow in order to configure these suggestions, please perform the following jquery code, after this, whenever '#' is pressed, suggestions will be shown\r\n\r\n\t$('textarea').ckeditor();\r\n\t//Here \"CKEDITOR.SHIFT + 51\" is the key combination for '#'\r\n\t$('textarea#ckeditorBox').ckeditor({ suggestionsTriggerKey: { keyCode: CKEDITOR.SHIFT + 51 }});\r\n\t\tCKEDITOR.on( 'instanceReady', function( evt ) {\r\n\t\t\t//Here 'Index.suggestions' is the Array which is holding the current list of suggestions\r\n\t\t\tCKEDITOR.instances.ckeditorBox.execCommand('reloadSuggetionBox',Index.suggestions);\r\n\t\t});\r\n\r\nThis will load the ckeditor(\"ckeditor\" is name of my ckeditor instance) and configure the plugin to show suggestions currently present int the \"Index.suggestions\" variable, anytime you need to refresh/change the suggestions you just need to call this function after reloading \"Index.suggestions\" variable\r\n\r\n \tCKEDITOR.instances.ckeditorBox.execCommand('reloadSuggetionBox',Index.suggestions);\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}